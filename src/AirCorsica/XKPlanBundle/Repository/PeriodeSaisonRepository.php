<?php

namespace AirCorsica\XKPlanBundle\Repository;
use DateTime;

use AirCorsica\XKPlanBundle\Entity\PeriodeSaison;

/**
 * PeriodeSaisonRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PeriodeSaisonRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * @param null $orderParPeriode
     * @return mixed
     */
    public function getPeriodesSaisons($dateDebut, $dateFin){
        $qb = $this->createQueryBuilder('ps');

        $dateMysql = DateTime::createFromFormat('d-m-Y',$dateDebut)->format('Y-m-d');
        $qb->andWhere('ps.dateDebut >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);

        $dateMysql = DateTime::createFromFormat('d-m-Y',$dateFin)->format('Y-m-d');
        $qb->andWhere('ps.dateFin <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);

        $qb->orderBy("ps.dateDebut", "ASC");

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }
    /**
     * Retourne la première périodeSaison en fonction d'une date de début et fin
     * infos : les temps de vol sont identiques pour toutes les périodes saisons d'une dates donnée
     *
     * @param string $dateDebut
     * @param string $dateFin
     * @return mixed
     */
    public function findPeriodesaisonByDate($dateDebut, $dateFin){

        $dateDebutMysql = \DateTime::createFromFormat('d-m-Y',$dateDebut)->format('Y-m-d');
        $dateFinMysql = \DateTime::createFromFormat('d-m-Y',$dateFin)->format('Y-m-d');

        $qb = $this->createQueryBuilder('ps');
        $qb->where('ps.dateDebut <= :date_debut');
        $qb->andWhere('ps.dateFin >= :date_fin');
        $qb->setParameter('date_debut',$dateDebutMysql);
        $qb->setParameter('date_fin',$dateFinMysql);

//        if(true == $excludeIATA){
//            $qb->andWhere('ps.isIATA != 1');
//        }

        $query = $qb->getQuery();
        $result = $query->execute();

//        if(sizeof($result) > 1 ){
//            /** @var PeriodeSaison $periodeSaison */
//            foreach ($result as $periodeSaison){
//                $iderrors[] = $periodeSaison->getId();
//            }
//            throw new \LogicException("La période demandée empiéte sur plusieurs périodes : ".implode(',',$iderrors));
//        }
        if(sizeof($result) == 0){
            return null;
        }

        return current($result);
    }

    /**
     * retourne la liste des périodes ordonnées par dates
     * @param $saison
     * @param $excludeIATA
     * @return array
     */
    public function getOdererdPeriodesSaison($saison, $excludeIATA=true){
        $qb = $this->createQueryBuilder('ps');
        $qb->join('ps.saison','s');
        $qb->orderBy('ps.dateDebut');
        $qb->andWhere('s.id = :id');
        if(true == $excludeIATA){
            $qb->andWhere('ps.isIATA != 1');
        }
        $qb->setParameter('id',$saison->getId());
        $query = $qb->getQuery();
        $result = $query->getResult();

        return $result;
    }
}
