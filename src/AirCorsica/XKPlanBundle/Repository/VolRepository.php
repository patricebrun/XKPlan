<?php

namespace AirCorsica\XKPlanBundle\Repository;

use AirCorsica\XKPlanBundle\Entity;
use DateTime;
use Symfony\Component\HttpFoundation\Request;

/**
 * VolRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class VolRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Retourne la liste des vols sans les vols historique
     *
     * @param Entity\Template $template
     * @param null $orderParPeriode
     * @return mixed
     */
    public function getVols(Entity\Template $template, $orderParPeriode = null){
        $qb = $this->createQueryBuilder('v');

        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        if($orderParPeriode){
            $qb->innerJoin("v.periodeDeVol", 'pv');
            $qb->orderBy('pv.decollage,pv.atterissage,pv.dateDebut,pv.dateFin',$orderParPeriode);
        }

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }


    /**
     * Retourne tous les vols qui ont une période de vol avec au moins une date commune avec la période $periodeSaison
     * @param Entity\Template $template
     * @param Entity\PeriodeSaison $periodeSaison
     * @return mixed
     */
    public function getVolsInOrIntersectPeriode(Entity\Template $template,Entity\PeriodeSaison $periodeSaison){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);
        $qb->join('v.periodeDeVol','pv');

        $dateDebutMysql = $periodeSaison->getDateDebut()->format('Y-m-d');
        $dateFinMysql = $periodeSaison->getDateFin()->format('Y-m-d');

        $expr = $qb->expr();
        $qb->andWhere(
            $expr->orX(
                $expr->andX(
                    'pv.dateDebut >= :date_debut_periode_saison',
                    'pv.dateDebut <= :date_fin_periode_saison'
                ),

                $expr->andX(
                    'pv.dateFin >= :date_debut_periode_saison',
                    'pv.dateFin <= :date_fin_periode_saison'
                ),

                $expr->andX(
                    'pv.dateDebut < :date_debut_periode_saison',
                    'pv.dateFin > :date_fin_periode_saison'
                )
            )
        );

        $qb->setParameter('date_debut_periode_saison',$dateDebutMysql);
        $qb->setParameter('date_fin_periode_saison',$dateFinMysql);

        $query = $qb->getQuery();
        $query->setFetchMode(Entity\Vol::class,'ligne', 3);
        $query->setFetchMode(Entity\Vol::class,'avion', 3);
        $query->setFetchMode(Entity\Vol::class,'typeDeVol', 3);
        $query->setFetchMode(Entity\Vol::class,'periodeDeVol', 3);
        $result = $query->execute();

        return $result;
    }

    /**
     * Retourne tous les vols qui ont une période de vol avec au moins une date commune avec la saison $saison
     * @param Entity\Template $template
     * @param Entity\Saison $saison
     * @return mixed
     */
    public function getVolsInOrIntersectSaison(Entity\Template $template,Entity\Saison $saison){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);
        $qb->join('v.periodeDeVol','pv');

        $dateDebutMysql = $saison->getPeriode()->getDateDebut()->format('Y-m-d');
        $dateFinMysql = $saison->getPeriode()->getDateFin()->format('Y-m-d');

        $expr = $qb->expr();
        $qb->andWhere(
            $expr->orX(
                $expr->andX(
                    'pv.dateDebut >= :date_debut_periode_saison',
                    'pv.dateDebut <= :date_fin_periode_saison'
                ),

                $expr->andX(
                    'pv.dateFin >= :date_debut_periode_saison',
                    'pv.dateFin <= :date_fin_periode_saison'
                ),

                $expr->andX(
                    'pv.dateDebut < :date_debut_periode_saison',
                    'pv.dateFin > :date_fin_periode_saison'
                )
            )
        );

        $qb->setParameter('date_debut_periode_saison',$dateDebutMysql);
        $qb->setParameter('date_fin_periode_saison',$dateFinMysql);

        $query = $qb->getQuery();
        $query->setFetchMode(Entity\Vol::class,'ligne', 3);
        $query->setFetchMode(Entity\Vol::class,'avion', 3);
        $query->setFetchMode(Entity\Vol::class,'typeDeVol', 3);
        $query->setFetchMode(Entity\Vol::class,'periodeDeVol', 3);
        $result = $query->execute();

        return $result;
    }

	/**
	 * Retourne tous les volsHistorique  qui ont une période de vol avec au moins une date commune avec la saison $saison
	 * @param Entity\Template $template
	 * @param Entity\Saison $saison
	 * @return mixed
	 */
	public function getVolsHistoriqueInOrIntersectSaison(Entity\Template $template,Entity\Saison $saison){
		$qb = $this->createQueryBuilder('v');
		$qb->where($qb->expr()->isInstanceOf('v',Entity\VolHistorique::class));
		$qb->join('v.template','t');
		$qb->andWhere('t.id = :template');
		$qb->setParameter('template',$template);
		$qb->join('v.periodeDeVol','pv');

		$dateDebutMysql = $saison->getPeriode()->getDateDebut()->format('Y-m-d');
		$dateFinMysql = $saison->getPeriode()->getDateFin()->format('Y-m-d');

		$expr = $qb->expr();
		$qb->andWhere(
			$expr->orX(
				$expr->andX(
					'pv.dateDebut >= :date_debut_periode_saison',
					'pv.dateDebut <= :date_fin_periode_saison'
				),

				$expr->andX(
					'pv.dateFin >= :date_debut_periode_saison',
					'pv.dateFin <= :date_fin_periode_saison'
				),

				$expr->andX(
					'pv.dateDebut < :date_debut_periode_saison',
					'pv.dateFin > :date_fin_periode_saison'
				)
			)
		);

		$qb->setParameter('date_debut_periode_saison',$dateDebutMysql);
		$qb->setParameter('date_fin_periode_saison',$dateFinMysql);

		$query = $qb->getQuery();
		$query->setFetchMode(Entity\Vol::class,'ligne', 3);
		$query->setFetchMode(Entity\Vol::class,'avion', 3);
		$query->setFetchMode(Entity\Vol::class,'typeDeVol', 3);
		$query->setFetchMode(Entity\Vol::class,'periodeDeVol', 3);
		$result = $query->execute();

		return $result;
	}

    /**
     * Retourne les vols filtrés
     *
     * @param Request $request
     * @param Entity\Template $template
     * @param string $orderParPeriode ASC | DESC
     * @return mixed
     */
    public function getVolsFilter(Request $request, Entity\Template $template, $orderParPeriode=null, $ligne=null){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        if ($request->get('numerodevol')){
            if ($request->query->has('exact')){
                $qb->andWhere('v.numero = :numerodevol');
                $qb->setParameter('numerodevol',$request->get('numerodevol'));
            }else{
                $qb->andWhere('v.numero lIKE :numerodevol');
                $qb->setParameter('numerodevol','%'.$request->get('numerodevol').'%');
            }
        }

        if($request->get('aeroport_aller') || $request->get('aeroport_retour') || $request->get('ligne') || $ligne){
            $qb->join('v.ligne','l');
        }

        if($request->get('aller') && !$request->get('retour')){
            if ($request->get('aeroport_aller') && $request->get('aeroport_retour')){
                $qb->join('l.aeroportDepart','ad');
                $qb->andWhere('ad.codeIATA = :aeroport_aller');
                $qb->setParameter('aeroport_aller',$request->get('aeroport_aller'));
                $qb->join('l.aeroportArrivee','aa');
                $qb->andWhere('aa.codeIATA = :aeroport_retour');
                $qb->setParameter('aeroport_retour',$request->get('aeroport_retour'));
            }else{
                if ($request->get('aeroport_aller')){
                    $qb->join('l.aeroportDepart','ad');
                    $qb->andWhere('ad.codeIATA = :aeroport_aller');
                    $qb->setParameter('aeroport_aller',$request->get('aeroport_aller'));
                }
                if ($request->get('aeroport_retour')){
                    $qb->join('l.aeroportArrivee','aa');
                    $qb->andWhere('aa.codeIATA = :aeroport_retour');
                    $qb->setParameter('aeroport_retour',$request->get('aeroport_retour'));
                }
            }
        }

        if($request->get('retour') && !$request->get('aller')){
            if ($request->get('aeroport_aller') && $request->get('aeroport_retour')){
                $qb->join('l.aeroportDepart','ad');
                $qb->andWhere('ad.codeIATA = :aeroport_aller');
                $qb->setParameter('aeroport_aller',$request->get('aeroport_retour'));
                $qb->join('l.aeroportArrivee','aa');
                $qb->andWhere('aa.codeIATA = :aeroport_retour');
                $qb->setParameter('aeroport_retour',$request->get('aeroport_aller'));
            }else{
                if ($request->get('aeroport_aller')){
                    $qb->join('l.aeroportArrivee','aa');
                    $qb->andWhere('aa.codeIATA = :aeroport_retour');
                    $qb->setParameter('aeroport_retour',$request->get('aeroport_aller'));
                }
                if ($request->get('aeroport_retour')){
                    $qb->join('l.aeroportDepart','ad');
                    $qb->andWhere('ad.codeIATA = :aeroport_aller');
                    $qb->setParameter('aeroport_aller',$request->get('aeroport_retour'));
                }
            }

        }

        if($request->get('retour') && $request->get('aller')){
            if ($request->get('aeroport_aller') && $request->get('aeroport_retour')){
                $qb->join('l.aeroportDepart','ad');
                $qb->join('l.aeroportArrivee','aa');
                $where = "(";
                $where .= "(ad.codeIATA ='".$request->get('aeroport_aller')."' AND aa.codeIATA ='".$request->get('aeroport_retour')."')";
                $where .= " OR (ad.codeIATA ='".$request->get('aeroport_retour')."' AND aa.codeIATA ='".$request->get('aeroport_aller')."')";
                $where .= ")";
                $qb->andWhere($where);
            }else{
                if ($request->get('aeroport_aller')){
                    $qb->join('l.aeroportDepart','ad');
                    $qb->join('l.aeroportArrivee','aa');
                    $where = "(";
                    $where .= "(ad.codeIATA ='".$request->get('aeroport_aller')."')";
                    $where .= " OR (aa.codeIATA ='".$request->get('aeroport_aller')."')";
                    $where .= ")";
                    $qb->andWhere($where);
                }

                if ($request->get('aeroport_retour')){
                    $qb->join('l.aeroportDepart','ad');
                    $qb->join('l.aeroportArrivee','aa');
                    $where = "(";
                    $where .= "(ad.codeIATA ='".$request->get('aeroport_retour')."')";
                    $where .= " OR (aa.codeIATA ='".$request->get('aeroport_retour')."')";
                    $where .= ")";
                    $qb->andWhere($where);
                }
            }
        }

        if ($request->get('ligne') && !is_array($request->get('ligne'))){
            $qb->andWhere('v.ligne = :ligne');
            $qb->setParameter('ligne',$request->get('ligne'));
        }
        if ($request->get('ligne') && is_array($request->get('ligne'))){
            $qb->andWhere('v.ligne IN (:ligne)');
            $qb->setParameter('ligne',$request->get('ligne'));
        }

        if ($request->get('avion')){
            $qb->andWhere('v.avion = :idavion');
            $qb->setParameter('idavion',$request->get('avion'));
        }

        if ($request->get('modif') && $request->get('date_debut_modif') && $request->get('date_fin_modif')){

            $dateFinMysql =DateTime::createFromFormat('d-m-Y',$request->get('date_fin_modif'))->format('Y-m-d');
            $qb->andWhere('v.dateTimeModification <= :date_fin_modif');
            $qb->setParameter('date_fin_modif',$dateFinMysql);

            $dateDebutMysql =DateTime::createFromFormat('d-m-Y',$request->get('date_debut_modif'))->format('Y-m-d');
            $qb->andWhere('v.dateTimeModification >= :date_debut_modif');
            $qb->setParameter('date_debut_modif',$dateDebutMysql);
        }

        if($request->query->has('msg_envoye') || $request->query->has('msg_non_envoye')){
            $qb->join('v.periodeDeVol','pv');
        }

        if ($request->query->has('msg_envoye') && !$request->query->has('msg_non_envoye') ){
            $qb->andWhere('pv.etat NOT LIKE :etat');
            $qb->setParameter('etat','%ending%');
        }

        if ($request->query->has('msg_non_envoye') && !$request->query->has('msg_envoye')){
            $qb->andWhere('pv.etat LIKE :etat');
            $qb->setParameter('etat','%ending%');
        }

        if ($request->get('type_vol')){
            $qb->join('v.typeDeVol','tv');
            $qb->andWhere('v.typeDeVol IN (:type_vol)')
                ->setParameter('type_vol', $request->get('type_vol'));
        }

        if ($request->get('affretement')){
            $qb->join('v.affretement','af');
            $qb->andWhere('v.affretement IN (:affretement)')
                ->setParameter('affretement', $request->get('affretement'));
        }


        if ($request->get('type_avion')){
            $qb->join('v.avion','av');
            $qb->join('av.typeAvion','ta');
            $qb->andWhere('ta.id = :type_avion');
            $qb->setParameter('type_avion',$request->get('type_avion'));
        }

        if ($request->get('compagnie')){
            $qb->join('v.compagnie','cp');
            $qb->andWhere('cp.id = :compagnie');
            $qb->setParameter('compagnie',$request->get('compagnie'));
        }

        if ($request->get('nature_vol')){
            $qb->join('v.naturesDeVol','nv');
            $qb->andWhere('nv.id = :nature_vol');
            $qb->setParameter('nature_vol',$request->get('nature_vol'));
        }

        if ($request->get('jours')){
            if(!in_array('pv',$qb->getAllAliases())){
                $qb->join('v.periodeDeVol','pv');
            }
            $where = "(";
            foreach ($request->get('jours') as $key=>$jour){
                if($jour!= "-")
                {
                    $where .= 'pv.joursDeValidite LIKE \'%'.$jour.'%\' OR ';
                }
            }
            $where = substr($where,0,-3);
            $where .= ")";
            $qb->andWhere($where);
        }

        if ($request->get('date_debut')){
            if(!in_array('pv',$qb->getAllAliases())){
                $qb->join('v.periodeDeVol','pv');
            }
            $dateMysql =DateTime::createFromFormat('d-m-Y',$request->get('date_debut'))->format('Y-m-d');
            $qb->andWhere('pv.dateFin >= :date_debut');
            $qb->setParameter('date_debut',$dateMysql);
        }

        if ($request->get('date_fin')){
            if(!in_array('pv',$qb->getAllAliases())){
                $qb->join('v.periodeDeVol','pv');
            }
            $dateMysql =DateTime::createFromFormat('d-m-Y',$request->get('date_fin'))->format('Y-m-d');
            $qb->andWhere('pv.dateDebut <= :date_fin');
            $qb->setParameter('date_fin',$dateMysql);
        }

        if ($request->get('deleste') !== null && ($request->get('deleste') == 0 || $request->get('deleste') == 1)){
            if(!in_array('pv',$qb->getAllAliases())){
                $qb->join('v.periodeDeVol','pv');
            }
            $qb->andWhere('pv.deleste = :deleste');
            $qb->setParameter('deleste',$request->get('deleste'));
        }

        if($orderParPeriode){
            if(!in_array('pv',$qb->getAllAliases())){
                $qb->join('v.periodeDeVol','pv');
            }
            if($request->get('ssim') || $request->get('ordreListeVol')){
                $qb->orderBy('pv.dateDebut,pv.dateFin,pv.decollage,pv.atterissage',$orderParPeriode);
            }else{
                $qb->orderBy('pv.decollage,pv.atterissage,pv.dateDebut,pv.dateFin',$orderParPeriode);
            }
        }

        if($ligne){
            $qb->andWhere('l.id = :ligneId');
            $qb->setParameter('ligneId',$ligne);
        }

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    /**
     * @param Entity\Template $template
     * @param DateTime $jourCalendrier
     * @return mixed
     */
    public function getVolsForDate(Entity\Template $template,\DateTime $jourCalendrier){
        $jourCalendrier->setTime(0,0,0);
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->leftjoin('AirCorsica\XKPlanBundle\Entity\PeriodeDeVol','p', 'WITH', 'v.periodeDeVol = p.id');
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);
        $qb->andWhere($qb->expr()->between(':jour_calendrier', 'p.dateDebut', 'p.dateFin'));
        $qb->andWhere('p.etat != :cancel');
        $qb->andWhere('p.etat != :pendingCancel');
        $qb->setParameter('cancel','cancel');
        $qb->setParameter('pendingCancel','pendingCancel');
        $qb->setParameter('jour_calendrier', $jourCalendrier, \Doctrine\DBAL\Types\Type::DATETIME);
        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getDayBeforeVolsArrivingOnDate(Entity\Template $template,\DateTime $jourCalendrier){

        $jourCalendrier->setTime(0,0,0);
        $veilleJourCalendrier = clone $jourCalendrier;
        $veilleJourCalendrier->modify('-1 day');

        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->leftjoin('AirCorsica\XKPlanBundle\Entity\PeriodeDeVol','p', 'WITH', 'v.periodeDeVol = p.id');
        $qb->join('v.template','t');
        $qb->join("v.periodeDeVol", 'pv');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);
        $qb->andWhere($qb->expr()->between(':jour_precedent', 'p.dateDebut', 'p.dateFin'));
        $qb->andWhere('p.etat != :cancel');
        $qb->andWhere('p.etat != :pendingCancel');
        $qb->setParameter('cancel','cancel');
        $qb->setParameter('pendingCancel','pendingCancel');
        $qb->setParameter('jour_precedent', $veilleJourCalendrier, \Doctrine\DBAL\Types\Type::DATETIME);
        $qb->andWhere('pv.atterissage <= pv.decollage');
        $qb->andWhere('pv.atterissage != :minuit');
        $qb->setParameter('minuit','00:00:00');
        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    /**
     * @param Entity\Vol $vol
     * @return mixed
     */
    public function getVolsAvecMemeNumero(Entity\Vol $vol){
        $qb = $this->createQueryBuilder('v');
        $expr = $qb->expr();

        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->innerJoin("v.periodeDeVol", 'pv');
        $qb->andWhere("v.numero = '".$vol->getNumero()."'");
        $qb->andWhere("pv.deleste = 0");
        $qb->andWhere("pv.etat != 'cancel'");
        $qb->andWhere("pv.etat != 'pendingCancel'");
        $qb->andWhere(
            $expr->andX(
                $expr->neq('v.id', ':id'),
                $expr->orX(
                    $expr->andX(
                        $expr->lte('pv.dateDebut', ':debut'),
                        $expr->gte('pv.dateFin', ':debut')
                    ),
                    $expr->andX(
                        $expr->gte('pv.dateDebut', ':debut'),
                        $expr->lte('pv.dateDebut', ':fin'),
                        $expr->gte('pv.dateFin', ':fin')
                    ),
                    $expr->andX(
                        $expr->gte('pv.dateDebut', ':debut'),
                        $expr->lte('pv.dateFin', ':fin')
                    )
                )
            )
        );
        $qb->setParameters(array('id' => $vol->getId(), 'debut' => $vol->getPeriodeDeVol()->getDateDebut(), 'fin' => $vol->getPeriodeDeVol()->getDateFin()));
        $qb->orderBy('pv.dateDebut',"ASC");

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getVolsDunAvionCeJourComprisDansPlageHoraire(Entity\Vol $vol, Entity\Avion $avion, \DateTime $datejour, $j, \DateTime $heuredecollage, \DateTime $heureatterissage, Entity\Template $template){

        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->innerJoin("v.periodeDeVol", 'pv');

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$avion->getId());

        //Date incluse
        $qb->andWhere('pv.dateFin >= :date_jour');
        $datedujour = $datejour->format('Y-m-d');
        $qb->setParameter('date_jour',$datedujour);
        $qb->andWhere('pv.dateDebut <= :date_jour');

        //Jour de validité inclus
        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$j.'%');

        //Horaire inclus ou chevauchant
        $expr = $qb->expr();
        $qb->andWhere(
            $expr->orX(
                $expr->andX(
                    'pv.atterissage > :heure_decollage',
                    'pv.decollage < :heure_decollage'
                ),

                $expr->andX(
                    'pv.decollage < :heure_atterissage',
                    'pv.atterissage > :heure_atterissage'
                )
            )
        );
        $qb->setParameter('heure_decollage',$heuredecollage);
        $qb->setParameter('heure_atterissage',$heureatterissage);


        //Template
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Etat
        $qb->andWhere("pv.deleste = 0");
        $qb->andWhere("pv.etat!= 'cancel'");
        $qb->andWhere("pv.etat!= 'pendingCancel'");

        $qb->orderBy('pv.atterissage',"ASC");

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getVolsAvecMemeAvion(Entity\Vol $vol, Entity\Template $template, Entity\Saison $saison = null){
        $qb = $this->createQueryBuilder('v');
        $qb->innerJoin("v.periodeDeVol", 'pv');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->andWhere("v.avion = ".$vol->getAvion()->getId());
        $qb->andWhere("v.avion = ".$vol->getAvion()->getId());
        $qb->andWhere("pv.deleste = 0");
        $qb->andWhere("pv.etat!= 'cancel'");
        $qb->andWhere("pv.etat!= 'pendingCancel'");
        $qb->andWhere("v.numero!= '".$vol->getNumero()."'");

        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        if($saison){
            $dateDebut = clone $saison->getPeriode()->getDateDebut();
            $dateMysql = $dateDebut->sub(new \DateInterval("P10D"))->format('Y-m-d');
            $qb->andWhere('pv.dateFin >= :date_debut');
            $qb->setParameter('date_debut',$dateMysql);

            $dateFin = clone $saison->getPeriode()->getDateFin();
            $dateMysql = $dateFin->add(new \DateInterval("P10D"))->format('Y-m-d');
            $qb->andWhere('pv.dateDebut <= :date_fin');
            $qb->setParameter('date_fin',$dateMysql);
        }

//        $qb->andWhere("pv.dateFin >= '".$vol->getPeriodeDeVol()->getDateFin()->format('Y-m-d')."'");
        $qb->orderBy("pv.dateFin","ASC");

        $query = $qb->getQuery();
        $result = $query->execute();
        return $result;
    }

    public function getVolPrecedentMemeJour(Entity\Vol $vol,$j, Entity\Template $template){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$vol->getAvion()->getId());

        //Vol
        $qb->andWhere('v.id != :id');
        $qb->setParameter('id',$vol->getId());

        //Periode de vol
        $qb->join('v.periodeDeVol','pv');


        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$j.'%');

        $dateMysql =DateTime::createFromFormat('d-m-Y',$vol->getPeriodeDeVol()->getDateDebut()->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateFin >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);

        $dateMysql =DateTime::createFromFormat('d-m-Y',$vol->getPeriodeDeVol()->getDateFin()->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateDebut <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);

        $qb->andWhere('pv.atterissage <= :decollage');
        $qb->setParameter('decollage',$vol->getPeriodeDeVol()->getDecollage());

        $qb->andWhere('pv.deleste = :deleste');
        $qb->setParameter('deleste','0');
        $qb->andWhere('pv.etat != :cancel');
        $qb->andWhere('pv.etat! = :pendingCancel');
        $qb->setParameter('cancel','cancel');
        $qb->setParameter('pendingCancel','pendingCancel');

        $qb->orderBy('pv.atterissage',"DESC");

        $qb->setFirstResult(0);
        $qb->setMaxResults(1);

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getVolPrecedentJourPrecedent(Entity\Vol $vol, $jourValiditePrecedent, Entity\Template $template){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$vol->getAvion()->getId());

        //Vol
        $qb->andWhere('v.id != :id');
        $qb->setParameter('id',$vol->getId());

        //Periode de vol
        $qb->join('v.periodeDeVol','pv');

        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$jourValiditePrecedent.'%');
//        $qb->andWhere('pv.joursDeValidite LIKE :jour');
//        $qb->setParameter('jour','%'.$vol->getPeriodeDeVol()->getJoursDeValidite()[$jourValiditeSuivant].'%');

        $dateDebut = clone $vol->getPeriodeDeVol()->getDateDebut();
        $dateDebut->sub(new \DateInterval("P1D"));
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateDebut->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateFin >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);
//        $dateMysql =DateTime::createFromFormat('d-m-Y',$vol->getPeriodeDeVol()->getDateFin()->format('d-m-Y'))->format('Y-m-d');
//        $qb->andWhere('pv.dateFin < :date_fin_2');
//        $qb->setParameter('date_fin_2',$dateMysql);

        $dateFin = clone $vol->getPeriodeDeVol()->getDateFin();
        $dateFin->sub(new \DateInterval("P1D"));
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateFin->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateDebut <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);
        $dateDebut = clone $vol->getPeriodeDeVol()->getDateDebut();
//        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateDebut->format('d-m-Y'))->format('Y-m-d');
//        $qb->andWhere('pv.dateDebut < :date_debut_2');
//        $qb->setParameter('date_debut_2',$dateMysql);

//        $qb->andWhere('pv.atterissage <= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getDecollage());

//        $qb->andWhere('pv.decollage >= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getAtterissage());

        $qb->andWhere('pv.deleste = :deleste');
        $qb->setParameter('deleste','0');
        $qb->andWhere('pv.etat != :cancel');
        $qb->andWhere('pv.etat != :pendingCancel');
        $qb->setParameter('cancel','cancel');
        $qb->setParameter('pendingCancel','pendingCancel');

        $qb->orderBy('pv.atterissage',"DESC");

        $qb->setFirstResult(0);
        $qb->setMaxResults(1);

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getPeriodeDeVolJourPrecedent(Entity\Vol $vol, $jourValiditePrecedent, Entity\Template $template){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$vol->getAvion()->getId());

        //Vol
        $qb->andWhere('v.id != :id');
        $qb->setParameter('id',$vol->getId());

        //Periode de vol
        $qb->join('v.periodeDeVol','pv');

        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$jourValiditePrecedent.'%');
//        $qb->andWhere('pv.joursDeValidite LIKE :jour');
//        $qb->setParameter('jour','%'.$vol->getPeriodeDeVol()->getJoursDeValidite()[$jourValiditeSuivant].'%');

        $dateDebut = clone $vol->getPeriodeDeVol()->getDateDebut();
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateDebut->sub(new \DateInterval("P1D"))->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateFin >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);

        $dateDebut = clone $vol->getPeriodeDeVol()->getDateDebut();
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateDebut->sub(new \DateInterval("P1D"))->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateDebut <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);

//        $qb->andWhere('pv.atterissage <= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getDecollage());

//        $qb->andWhere('pv.decollage >= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getAtterissage());

        $qb->orderBy('pv.atterissage',"DESC");

        $qb->setFirstResult(0);
        $qb->setMaxResults(1);

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getVolProchainMemeJour(Entity\Vol $vol, $j, Entity\Template $template){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$vol->getAvion()->getId());

        //Vol
        $qb->andWhere('v.id != :id');
        $qb->setParameter('id',$vol->getId());


        //Periode de vol
        $qb->join('v.periodeDeVol','pv');

        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$j.'%');

        $dateMysql =DateTime::createFromFormat('d-m-Y',$vol->getPeriodeDeVol()->getDateDebut()->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateFin >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);

        $dateMysql =DateTime::createFromFormat('d-m-Y',$vol->getPeriodeDeVol()->getDateFin()->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateDebut <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);

//        $qb->andWhere('pv.atterissage <= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getDecollage());

        $qb->andWhere('pv.decollage >= :atterissage');
        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getAtterissage());

        $qb->andWhere('pv.deleste = :deleste');
        $qb->setParameter('deleste','0');
        $qb->andWhere('pv.etat != :cancel');
        $qb->andWhere('pv.etat != :pendingCancel');
        $qb->setParameter('cancel','cancel');
        $qb->setParameter('pendingCancel','pendingCancel');

        $qb->orderBy('pv.atterissage',"ASC");

        $qb->setFirstResult(0);
        $qb->setMaxResults(1);

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getVolProchainJourSuivant(Entity\Vol $vol, $jourValiditeSuivant, Entity\Template $template){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$vol->getAvion()->getId());

        //Vol
        $qb->andWhere('v.id != :id');
        $qb->setParameter('id',$vol->getId());

        //Periode de vol
        $qb->join('v.periodeDeVol','pv');

        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$jourValiditeSuivant.'%');
//        $qb->andWhere('pv.joursDeValidite LIKE :jour');
//        $qb->setParameter('jour','%'.$vol->getPeriodeDeVol()->getJoursDeValidite()[$jourValiditeSuivant].'%');

        /** @var DateTime $dateMysql */
        $dateDebut = clone $vol->getPeriodeDeVol()->getDateDebut();
        $dateDebut->add(new \DateInterval("P1D"));
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateDebut->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateFin >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);
        $dateFin = clone $vol->getPeriodeDeVol()->getDateFin();
//        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateFin->format('d-m-Y'))->format('Y-m-d');
//        $qb->andWhere('pv.dateFin > :date_fin_2');
//        $qb->setParameter('date_fin_2',$dateMysql);

        $dateFin = clone $vol->getPeriodeDeVol()->getDateFin();
        $dateFin->add(new \DateInterval("P1D"));
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateFin->format('d-m-Y'))->format('Y-m-d');

        $qb->andWhere('pv.dateDebut <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);
//        $dateMysql =DateTime::createFromFormat('d-m-Y',$vol->getPeriodeDeVol()->getDateDebut()->format('d-m-Y'))->format('Y-m-d');
//        $qb->andWhere('pv.dateDebut > :date_debut_2');
//        $qb->setParameter('date_debut_2',$dateMysql);

//        $qb->andWhere('pv.atterissage <= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getDecollage());

//        $qb->andWhere('pv.decollage >= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getAtterissage());
        $qb->andWhere('pv.deleste = :deleste');
        $qb->setParameter('deleste','0');
        $qb->andWhere('pv.etat != :cancel');
        $qb->andWhere('pv.etat != :pendingCancel');
        $qb->setParameter('cancel','cancel');
        $qb->setParameter('pendingCancel','pendingCancel');

        $qb->orderBy('pv.decollage',"ASC");

        $qb->setFirstResult(0);
        $qb->setMaxResults(1);

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }

    public function getPeriodeDeVolJourSuivant(Entity\Vol $vol, $jourValiditeSuivant, Entity\Template $template){
        $qb = $this->createQueryBuilder('v');
        $qb->where($qb->expr()->isInstanceOf('v',Entity\Vol::class));
        $qb->join('v.template','t');
        $qb->andWhere('t.id = :template');
        $qb->setParameter('template',$template);

        //Avion
        $qb->andWhere('v.avion = :idavion');
        $qb->setParameter('idavion',$vol->getAvion()->getId());

        //Vol
        $qb->andWhere('v.id != :id');
        $qb->setParameter('id',$vol->getId());

        //Periode de vol
        $qb->join('v.periodeDeVol','pv');

        $qb->andWhere('pv.joursDeValidite LIKE :jour');
        $qb->setParameter('jour','%'.$jourValiditeSuivant.'%');
//        $qb->andWhere('pv.joursDeValidite LIKE :jour');
//        $qb->setParameter('jour','%'.$vol->getPeriodeDeVol()->getJoursDeValidite()[$jourValiditeSuivant].'%');

        $dateFin = clone $vol->getPeriodeDeVol()->getDateFin();
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateFin->add(new \DateInterval("P1D"))->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateFin >= :date_debut');
        $qb->setParameter('date_debut',$dateMysql);

        $dateFin = clone $vol->getPeriodeDeVol()->getDateFin();
        $dateMysql =DateTime::createFromFormat('d-m-Y',$dateFin->add(new \DateInterval("P1D"))->format('d-m-Y'))->format('Y-m-d');
        $qb->andWhere('pv.dateDebut <= :date_fin');
        $qb->setParameter('date_fin',$dateMysql);

//        $qb->andWhere('pv.atterissage <= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getDecollage());

//        $qb->andWhere('pv.decollage >= :atterissage');
//        $qb->setParameter('atterissage',$vol->getPeriodeDeVol()->getAtterissage());

        $qb->orderBy('pv.decollage',"ASC");

        $qb->setFirstResult(0);
        $qb->setMaxResults(1);

        $query = $qb->getQuery();
        $result = $query->execute();

        return $result;
    }
}
